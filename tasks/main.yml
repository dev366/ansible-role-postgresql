---
- debug: msg="Including variables from <{{ ansible_distribution | lower }}-{{ ansible_distribution_version.split('.')[0] | lower }}.yml> file."

- name: Set distro-specific variables
  include_vars: "{{ ansible_distribution | lower }}-{{ ansible_distribution_version.split('.')[0] | lower }}.yml"

- include: postgresql-install-{{ ansible_distribution | lower }}-{{ ansible_distribution_version.split('.')[0] | lower }}.yml

- name: Install python-psycopg2 (for Ansible postgresql_db module)
  package: name=python-psycopg2 state=installed

  # In some OS services are not enabled by default.
- name: Run PostgreSQL service on system start
  service: name="{{ postgresql_service_name }}" enabled=yes

- name: Allow access to PostgreSQL
  copy:
    dest: "{{ postgresql_data_dir }}/pg_hba.conf"
    content: |
      local   all   postgres   peer
      local   all   all        peer
      local   all   all        trust
      host    all   all        ::1/128 trust
      host    all   all        0.0.0.0/0   md5
  notify: PostgreSQL - restart
  when: current_env != "prod"

- name: Allow PostgreSQL to listen on all addresses
  lineinfile: dest="{{ postgresql_data_dir }}/postgresql.conf"
              regexp="^listen_addresses"
              line="listen_addresses = '*'" state=present
  notify: PostgreSQL - restart
  when: current_env != "prod"

- name: Open firewall on PostgreSQL port
  firewalld: service="{{ postgresql_service_name }}" permanent=true immediate=true state=enabled
  when: current_env != "prod"

- meta: flush_handlers

  # Restart handlers will not fire in case we configuring prod environment. 
  # So we need to start the service separately.
- name: Ensure PostgreSQL service is running
  service: name="{{ postgresql_service_name }}" state=started

- name: Create PostgreSQL user "{{ username }}"
  become_user: postgres
  postgresql_user: name={{ username }} password={{ password }} state=present

- name: Create database
  become_user: postgres
  postgresql_db: name={{ database }} encoding='UTF-8' login_user=postgres state=present owner={{ username }}

# We suppose that vagrant user exists if /home/vagrant dir exists.
- name: Check if vagrant user exists
  stat: path=/home/vagrant
  register: vagrant_user_home

- block:
  - name: Save PostgreSQL password for {{ username }} to allow running commands without password
    lineinfile: dest=/home/vagrant/.pgpass
                regexp="^localhost:{{ port }}:{{ database }}"
                line="localhost:{{ port }}:{{ database }}:{{ username }}:{{ password }}"
                create=yes
                state=present
  - name: Set /home/vagrant/.pgpass file premissions
    file: path=/home/vagrant/.pgpass owner=vagrant group=vagrant mode=0600 state=file
  when: current_env != "prod" and vagrant_user_home.stat.stat.isdir is defined and vagrant_user_home.stat.stat.isdir
